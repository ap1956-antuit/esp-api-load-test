<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="DP-Antuit" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="token" elementType="Argument">
            <stringProp name="Argument.name">token</stringProp>
            <stringProp name="Argument.value">eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImlUb2xhY2N4eGszWmg4NmgxOW15c0FYUUp0VUVCelQwUXNLUjc1M0luRU0ifQ.eyJpc3MiOiJodHRwczovL2FudHVpdGJ0b2MuYjJjbG9naW4uY29tL2Y1NTkzYmU4LTI2MDMtNGIyYy04NGI2LWFhN2E5Yjg2ZGMwMC92Mi4wLyIsImV4cCI6MTY2NzkyNjMzMSwibmJmIjoxNjY3OTIyNzMxLCJhdWQiOiJkMGU1ZTk4OC1iYjI0LTRiMzQtOWRmZi0zY2QwZWFmYTZlZTEiLCJzdWIiOiI3MmQ2YmFiNC0zZWJlLTQwMjAtYTA5Ny0xNWRlMmYxY2ViZWYiLCJlbWFpbCI6ImZhcmtoYWQueWFraHNoaWJhZXZAYW50dWl0LmFpIiwib2lkIjoiNzJkNmJhYjQtM2ViZS00MDIwLWEwOTctMTVkZTJmMWNlYmVmIiwibmFtZSI6IkZhcmtoYWQgWWFraHNoaWJhZXYiLCJpZHAiOiJodHRwczovL2xvZ2luLm1pY3Jvc29mdG9ubGluZS5jb20vZjU1OTNiZTgtMjYwMy00YjJjLTg0YjYtYWE3YTliODZkYzAwL3YyLjAiLCJlbWFpbHMiOlsiZmFya2hhZC55YWtoc2hpYmFldkBhbnR1aXQuYWkiXSwidGlkIjoiZjU1OTNiZTgtMjYwMy00YjJjLTg0YjYtYWE3YTliODZkYzAwIiwibm9uY2UiOiI2MjIyYzU2NS0xZDBmLTRhNGUtODJmZi1kMDZjYzljYmY2MGUiLCJzY3AiOiJhcGkiLCJhenAiOiJkMGU1ZTk4OC1iYjI0LTRiMzQtOWRmZi0zY2QwZWFmYTZlZTEiLCJ2ZXIiOiIxLjAiLCJpYXQiOjE2Njc5MjI3MzF9.EVV5geOexZKoimJ7OpWk3AvZIBouVGJE2xPcrqcW9vjS4SkAusqHTCrjhYjFVlNhdjwQ1x7DPWWAG8xANkFEVlS5Wtf-9X-Cp4jV5NOEa0u78QNMSNX4t7zVHa0XlY-0eCpwqceV-_4COWp-_2z5iuHy8PMX7Gwt8jqPCX4edYO88Y5i18yJeJUbdRSpev_VPcFA9hkc5KnXW8n_OQm__1mMrvOoWU6f9oDjP45LJ8fKzdw7z0Uwj9dYT1RISlzDcKH1MSBQK3yIs3Kgykimf3_Y051gG7grOF4s45iB0KZ7wlDDbHnz14QlFmdJ77PoRuYvbejxQqAuTYPYHM_CgQ</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="dpConfig.csv" enabled="true">
        <stringProp name="filename">dpConfig.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">datasetID,workbookId,templateId,dpDatbase,db_username,isDbcheck,name_ip,BASE_URI,PATH,Protocol,applicationUrl</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="filePath" elementType="Argument">
            <stringProp name="Argument.name">filePath</stringProp>
            <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbUsername" elementType="Argument">
            <stringProp name="Argument.name">dbUsername</stringProp>
            <stringProp name="Argument.value">abdulr</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">This is a method where we can declare our variables and use in our tests, content-type is not necessary because it can be added in HTTP Header Manager</stringProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DP-QA" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">connection</stringProp>
          <stringProp name="dbUrl">jdbc:mariadb://singlestore-qa1.qa1.esp.antuit.ai:3306</stringProp>
          <stringProp name="driver">org.mariadb.jdbc.Driver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Bj3Y4f9nuUr8Ny5k</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">${dbUsername}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="userData.csv Config" enabled="true">
          <stringProp name="filename">accessToken.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">access_token,esp_user_token</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">This file used to pass measure data</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Dimensions.csv Config" enabled="true">
          <stringProp name="filename">Dimensions.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">dimension_1, dimension_2, dimension_3, dimensionLevel_1, dimensionId_1</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">This file used to pass dimension data</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="productData.csv Config" enabled="true">
          <stringProp name="filename">productData.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">dimLevelColName_1,dimLevelsId,dimLevelColName_2,dimColNameId</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">This file used to pass measure data</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="productCategories.csv Config" enabled="true">
          <stringProp name="filename">productCategories.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">product_category_id, alert_type_value, week_range</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">This file used to pass measure data</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="ScopeCreation.csv Config" enabled="true">
          <stringProp name="filename">ScopeCreation.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">scope_name ,scope_name_update,dimensions,dimension_level_name,level_values,cmpOperator</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">accept</stringProp>
              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">authorization</stringProp>
              <stringProp name="Header.value">${access_token}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">espusertoken</stringProp>
              <stringProp name="Header.value">${esp_user_token}</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Header Manager is used to pass certain information to our API test such as Token, UserName/Password, Content-Type, etc (content-type is neccessary) or pass info from user_defined_variables</stringProp>
        </HeaderManager>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">500</stringProp>
        </ConstantTimer>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Demand Planning (DP)" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="FVA" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Complex Filters" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">7</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="ComplexFilter.cfg Config" enabled="true">
                <stringProp name="filename">ComplexFilterConfig.csv</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">dimensionLevelColumnName,dimensionColumnName,columnName,dimColumnId,cmpOperator,startDate,endDate</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If only StartWeek and EndWeek range selected" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${dimensionLevelColumnName}&quot;==&quot;time&quot; &amp;&amp; &quot;${dimensionColumnName}&quot;==&quot;time&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_products_data using ${dimensionLevelColumnName} filter" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_products_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_products_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path"></stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">fetch_products_data</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query fetch_products_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Scope.variable">success_response_message</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                    <stringProp name="DurationAssertion.duration">5000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_planner_data using ${dimensionLevelColumnName} filter" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_planner_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: 10,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;
        }
      ]
    },
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;user&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: []
  }
},&quot;query&quot;:&quot;query fetch_planner_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path"></stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">fetch_planner_data</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query fetch_planner_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: 10,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;
        }
      ]
    },
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;user&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: []
  }
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Scope.variable">success_response_message</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                    <stringProp name="DurationAssertion.duration">5000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If only StartWeek and EndWeek range selected" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${dimensionLevelColumnName}&quot;!=&quot;time&quot; &amp;&amp; &quot;${dimensionColumnName}&quot;!=&quot;time&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_products_data using ${dimensionLevelColumnName} filter" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_products_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimColumnId}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_products_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path"></stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">fetch_products_data</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query fetch_products_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimColumnId}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Scope.variable">success_response_message</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                    <stringProp name="DurationAssertion.duration">5000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_planner_data using ${dimensionLevelColumnName} filter" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_planner_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: 10,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;
        }
      ]
    },
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;user&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimColumnId}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: []
  }
},&quot;query&quot;:&quot;query fetch_planner_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path"></stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">fetch_planner_data</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query fetch_planner_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: 10,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;
        }
      ]
    },
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;user&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${startDate}&quot;,
                &quot;${endDate}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${dimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${dimensionLevelColumnName}&quot;,
              &quot;cmpOperator&quot;: &quot;${cmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimColumnId}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: []
  }
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Scope.variable">success_response_message</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                    <stringProp name="DurationAssertion.duration">5000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Without Applied Filter" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_products_data" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_products_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_products_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_products_data</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_products_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_planner_data" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_planner_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: 10,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;
        }
      ]
    },
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;user&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: []
  }
},&quot;query&quot;:&quot;query fetch_planner_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_planner_data</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_planner_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: 10,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;
        }
      ]
    },
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;user&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: []
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller with Filters Applied" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="TestPlan.comments">Loop, for diffrent diemension levels &amp; deffrent permitation &amp; combination</stringProp>
              <stringProp name="LoopController.loops">15</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="FVAFilters.csv Config" enabled="true">
                <stringProp name="filename">${filePath}FVAFilters.csv</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">DimensionColumnName,ProductColumnNameFilter,CmpOperator,dimensionLevel_id,displayNames,Startdate_id,Enddate_id</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <stringProp name="TestPlan.comments">This file used to pass measure data</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_planner_data ${ProductColumnNameFilter} filter" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_planner_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: 10,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;
        }
      ]
    },
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;user&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: []
  }
},&quot;query&quot;:&quot;query fetch_planner_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_planner_data</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_planner_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: null,
    &quot;first&quot;: 10,
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;user&quot;,
          &quot;direction&quot;: &quot;ASC&quot;
        }
      ]
    },
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;user&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;specialMeasures&quot;: []
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="fetch_products_data ${ProductColumnNameFilter} filter" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetch_products_data&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query fetch_products_data($query: DAQueryInputMultiTable!) {\n  daDataQueryMultiTable(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          dimensionLevelColumnName\n          uniqueID\n          name\n          description\n          externalID\n          comments {\n            measureName\n            comment {\n              isRecalculated\n              isCommentAvailable\n              value\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        measureValues\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">fetch_products_data</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query fetch_products_data($query: DAQueryInputMultiTable!) {
  daDataQueryMultiTable(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          dimensionLevelColumnName
          uniqueID
          name
          description
          externalID
          comments {
            measureName
            comment {
              isRecalculated
              isCommentAvailable
              value
              __typename
            }
            __typename
          }
          __typename
        }
        measureValues
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: [
      &quot;fact_data&quot;
    ],
    &quot;after&quot;: &quot;0&quot;,
    &quot;first&quot;: 10,
    &quot;sort&quot;: null,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;dimensionLevels&quot;: [
      &quot;opstudy&quot;
    ],
    &quot;aggregatedMeasures&quot;: [
      &quot;sum_st_ty&quot;,
      &quot;sum_hist_total_forecast&quot;,
      &quot;sum_hist_system_total_forecast&quot;,
      &quot;user_bias&quot;,
      &quot;bias_st&quot;,
      &quot;user_mape&quot;,
      &quot;mape_st&quot;,
      &quot;planner_value_add&quot;,
      &quot;count_of_overrides&quot;
    ],
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;time&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;time&quot;,
              &quot;cmpOperator&quot;: &quot;BETWEEN&quot;,
              &quot;values&quot;: [
                &quot;${Startdate_id}&quot;,
                &quot;${Enddate_id}&quot;
              ]
            }
          ]
        },
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;templateId&quot;: &quot;${templateId}&quot;,
    &quot;conversionType&quot;: &quot;&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">getProductrowCount</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..totalRows</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">### Not Found ###</stringProp>
                  <stringProp name="Scope.variable"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getEventData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getEventData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;event&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;event&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getEventData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getEventData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getEventData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;event&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;event&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSegmentData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSegmentData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;segment&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;segment&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getSegmentData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSegmentData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSegmentData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;segment&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;segment&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getAdLocationData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAdLocationData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;ad_location&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;ad_location&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getAdLocationData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getAdLocationData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getAdLocationData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;ad_location&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;ad_location&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getVendorData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getVendorData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;vendor&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;vendor&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getVendorData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getVendorData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getVendorData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;complex_filters_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;vendor&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;vendor&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSeasonData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSeasonData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;season&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getSeasonData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSeasonData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSeasonData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;season&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getSeasonCategoryData" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSeasonCategoryData&quot;,&quot;variables&quot;:{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;season_category&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season_category&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
},&quot;query&quot;:&quot;query getSeasonCategoryData($query: DADimMembersQueryInput!) {\n  daDimMembersQuery(queries: [$query]) {\n    edges {\n      node {\n        dimensionMembers {\n          id\n          uniqueID\n          name\n          externalID\n          description\n          dimensionLevelColumnName\n          __typename\n        }\n        __typename\n      }\n      cursor\n      __typename\n    }\n    pageInfo {\n      totalRows\n      hasNextPage\n      __typename\n    }\n    error\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URI}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">getSeasonCategoryData</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query getSeasonCategoryData($query: DADimMembersQueryInput!) {
  daDimMembersQuery(queries: [$query]) {
    edges {
      node {
        dimensionMembers {
          id
          uniqueID
          name
          externalID
          description
          dimensionLevelColumnName
          __typename
        }
        __typename
      }
      cursor
      __typename
    }
    pageInfo {
      totalRows
      hasNextPage
      __typename
    }
    error
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;query&quot;: {
    &quot;datasetID&quot;: ${datasetID},
    &quot;datatable&quot;: &quot;season_vendor_data&quot;,
    &quot;scope&quot;: {
      &quot;dimensionFilters&quot;: [
        {
          &quot;dimensionColumnName&quot;: &quot;${DimensionColumnName}&quot;,
          &quot;and&quot;: [
            {
              &quot;dimensionLevelColumnName&quot;: &quot;${ProductColumnNameFilter}&quot;,
              &quot;cmpOperator&quot;: &quot;${CmpOperator}&quot;,
              &quot;values&quot;: [
                &quot;${dimensionLevel_id}&quot;
              ],
              &quot;displayNames&quot;: [
                &quot;${displayNames}&quot;
              ]
            }
          ]
        }
      ]
    },
    &quot;dimensionLevels&quot;: [
      &quot;season_category&quot;
    ],
    &quot;sort&quot;: {
      &quot;entries&quot;: [
        {
          &quot;columnName&quot;: &quot;season_category&quot;,
          &quot;direction&quot;: &quot;ASC&quot;,
          &quot;columnType&quot;: &quot;NAME&quot;
        }
      ]
    },
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;,
    &quot;workbookId&quot;: &quot;${workbookId}&quot;,
    &quot;templateId&quot;: &quot;${templateId}&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"> ### Response Code is not 200... ###</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Scope.variable">success_response_message</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">5000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isDbcheck true" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${isDbcheck}&quot;== true)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;NOT IN&quot; &amp; DimensionColumnName &quot;product&quot;" enabled="true">
                    <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;NOT_IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;product&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${ProductColumnNameFilter}&apos; product_data" enabled="true">
                      <stringProp name="dataSource">connection</stringProp>
                      <stringProp name="query">WITH t AS (
SELECT
	pdx.opstudy_id AS opstudy_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(hist_total_forecast) AS sum_hist_total_forecast,
	SUM(hist_system_total_forecast) AS sum_hist_system_total_forecast,
	( COUNT( if( ( ROUND (hist_system_total_forecast, 4) - ROUND(hist_total_forecast, 4) &lt;&gt; 0 ), 1, NULL ) ) ) AS count_of_overrides,
	SUM(error_st) AS sum_error_st,
	SUM(abs_error_st) AS sum_abs_error_st,
	SUM(user_abs_error_st) AS sum_user_abs_error_st
FROM
	${dpDatbase}.fact_data fd,
	${dpDatbase}.product_dim_xref pdx,
	${dpDatbase}.time_dim_xref tdx
WHERE
	fd.product_id = pdx.product_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and pdx.${ProductColumnNameFilter}_id NOT IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.opstudy_id )
SELECT
	t.opstudy_id AS opstudy_id,
	&apos;opstudy&apos;,
	odd.opstudy_name AS opstudy_name,
	odd.opstudy_description AS opstudy_description,
	odd.opstudy_external_id AS opstudy_external_id,
	sum_st_ty,
	sum_hist_total_forecast,
	sum_hist_system_total_forecast,
	(sum_hist_total_forecast * 100 / sum_st_ty) AS user_bias,
	(sum_error_st * 100 / sum_st_ty) AS bias_st,
	(sum_user_abs_error_st * 100 / sum_st_ty) AS user_mape,
	(sum_abs_error_st * 100 / sum_st_ty) AS mape_st,
	( (sum_abs_error_st * 100 / sum_st_ty) - (sum_user_abs_error_st * 100 / sum_st_ty) ) AS planner_value_add,
	count_of_overrides,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.opstudy_dim_desc odd
WHERE
	t.opstudy_id = odd.opstudy_id
GROUP BY
	t.opstudy_id,
	opstudy_name,
	opstudy_description,
	opstudy_external_id,
	sum_error_st,
	sum_abs_error_st,
	sum_user_abs_error_st,
	sum_st_ty,
	sum_hist_total_forecast,
	sum_hist_system_total_forecast,
	count_of_overrides
ORDER BY
	opstudy_id</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="queryType">Select Statement</stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                      <stringProp name="resultSetMaxRows"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                      <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                    </JDBCSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1890478328">${getProductrowCount}</stringProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                        <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">totalCount_#</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;IN&quot; &amp; DimensionColumnName &quot;product&quot;" enabled="true">
                    <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;product&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch &apos;${ProductColumnNameFilter}&apos; product_data" enabled="true">
                      <stringProp name="dataSource">connection</stringProp>
                      <stringProp name="query">WITH t AS (
SELECT
	pdx.opstudy_id AS opstudy_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(hist_total_forecast) AS sum_hist_total_forecast,
	SUM(hist_system_total_forecast) AS sum_hist_system_total_forecast,
	( COUNT( if( ( ROUND (hist_system_total_forecast, 4) - ROUND(hist_total_forecast, 4) &lt;&gt; 0 ), 1, NULL ) ) ) AS count_of_overrides,
	SUM(error_st) AS sum_error_st,
	SUM(abs_error_st) AS sum_abs_error_st,
	SUM(user_abs_error_st) AS sum_user_abs_error_st
FROM
	${dpDatbase}.fact_data fd,
	${dpDatbase}.product_dim_xref pdx,
	${dpDatbase}.time_dim_xref tdx
WHERE
	fd.product_id = pdx.product_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and pdx.${ProductColumnNameFilter}_id IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.opstudy_id )
SELECT
	t.opstudy_id AS opstudy_id,
	&apos;opstudy&apos;,
	odd.opstudy_name AS opstudy_name,
	odd.opstudy_description AS opstudy_description,
	odd.opstudy_external_id AS opstudy_external_id,
	sum_st_ty,
	sum_hist_total_forecast,
	sum_hist_system_total_forecast,
	(sum_hist_total_forecast * 100 / sum_st_ty) AS user_bias,
	(sum_error_st * 100 / sum_st_ty) AS bias_st,
	(sum_user_abs_error_st * 100 / sum_st_ty) AS user_mape,
	(sum_abs_error_st * 100 / sum_st_ty) AS mape_st,
	( (sum_abs_error_st * 100 / sum_st_ty) - (sum_user_abs_error_st * 100 / sum_st_ty) ) AS planner_value_add,
	count_of_overrides,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.opstudy_dim_desc odd
WHERE
	t.opstudy_id = odd.opstudy_id
GROUP BY
	t.opstudy_id,
	opstudy_name,
	opstudy_description,
	opstudy_external_id,
	sum_error_st,
	sum_abs_error_st,
	sum_user_abs_error_st,
	sum_st_ty,
	sum_hist_total_forecast,
	sum_hist_system_total_forecast,
	count_of_overrides
ORDER BY
	opstudy_id</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="queryType">Select Statement</stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                      <stringProp name="resultSetMaxRows"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                      <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                    </JDBCSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1890478328">${getProductrowCount}</stringProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                        <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">totalCount_#</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;NOT IN&quot; &amp; DimensionColumnName &quot;location&quot;" enabled="true">
                    <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;NOT_IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;location&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch  &apos;${ProductColumnNameFilter}&apos; product_data" enabled="true">
                      <stringProp name="dataSource">connection</stringProp>
                      <stringProp name="query">WITH t AS (
SELECT
	pdx.opstudy_id AS opstudy_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(hist_total_forecast) AS sum_hist_total_forecast,
	SUM(hist_system_total_forecast) AS sum_hist_system_total_forecast,
	( COUNT( if( ( ROUND (hist_system_total_forecast, 4) - ROUND(hist_total_forecast, 4) &lt;&gt; 0 ), 1, NULL ) ) ) AS count_of_overrides,
	SUM(error_st) AS sum_error_st,
	SUM(abs_error_st) AS sum_abs_error_st,
	SUM(user_abs_error_st) AS sum_user_abs_error_st
FROM
	${dpDatbase}.fact_data fd,
	${dpDatbase}.product_dim_xref pdx,
	${dpDatbase}.time_dim_xref tdx,
     ${dpDatbase}.location_dim_xref ldx
WHERE
	fd.location_id = ldx.location_id
	AND fd.product_id = pdx.product_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and ldx.${ProductColumnNameFilter}_id NOT IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.opstudy_id )
SELECT
	t.opstudy_id AS opstudy_id,
	&apos;opstudy&apos;,
	odd.opstudy_name AS opstudy_name,
	odd.opstudy_description AS opstudy_description,
	odd.opstudy_external_id AS opstudy_external_id,
	sum_st_ty,
	sum_hist_total_forecast,
	sum_hist_system_total_forecast,
	(sum_hist_total_forecast * 100 / sum_st_ty) AS user_bias,
	(sum_error_st * 100 / sum_st_ty) AS bias_st,
	(sum_user_abs_error_st * 100 / sum_st_ty) AS user_mape,
	(sum_abs_error_st * 100 / sum_st_ty) AS mape_st,
	( (sum_abs_error_st * 100 / sum_st_ty) - (sum_user_abs_error_st * 100 / sum_st_ty) ) AS planner_value_add,
	count_of_overrides,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.opstudy_dim_desc odd
WHERE
	t.opstudy_id = odd.opstudy_id
GROUP BY
	t.opstudy_id,
	opstudy_name,
	opstudy_description,
	opstudy_external_id,
	sum_error_st,
	sum_abs_error_st,
	sum_user_abs_error_st,
	sum_st_ty,
	sum_hist_total_forecast,
	sum_hist_system_total_forecast,
	count_of_overrides
ORDER BY
	opstudy_id</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="queryType">Select Statement</stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                      <stringProp name="resultSetMaxRows"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                      <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that &apos;${ProductColumnNameFilter}&apos; are using it.</stringProp>
                    </JDBCSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1890478328">${getProductrowCount}</stringProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                        <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">totalCount_#</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If cmpOperator &quot;IN&quot; &amp; DimensionColumnName &quot;location&quot;" enabled="true">
                    <stringProp name="IfController.condition">${__jexl3(&quot;${CmpOperator}&quot;==&quot;IN&quot; &amp;&amp; &quot;${DimensionColumnName}&quot;==&quot;location&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Query to fetch  &apos;${ProductColumnNameFilter}&apos; product_data" enabled="true">
                      <stringProp name="dataSource">connection</stringProp>
                      <stringProp name="query">WITH t AS (
SELECT
	pdx.opstudy_id AS opstudy_id,
	SUM(st_ty) AS sum_st_ty,
	SUM(hist_total_forecast) AS sum_hist_total_forecast,
	SUM(hist_system_total_forecast) AS sum_hist_system_total_forecast,
	( COUNT( if( ( ROUND (hist_system_total_forecast, 4) - ROUND(hist_total_forecast, 4) &lt;&gt; 0 ), 1, NULL ) ) ) AS count_of_overrides,
	SUM(error_st) AS sum_error_st,
	SUM(abs_error_st) AS sum_abs_error_st,
	SUM(user_abs_error_st) AS sum_user_abs_error_st
FROM
	${dpDatbase}.fact_data fd,
	${dpDatbase}.product_dim_xref pdx,
	${dpDatbase}.time_dim_xref tdx,
	${dpDatbase}.location_dim_xref ldx
WHERE
	fd.location_id = ldx.location_id
	AND fd.product_id = pdx.product_id
	AND fd.time_id = tdx.time_id
	AND tdx.time_id BETWEEN &apos;${Startdate_id}&apos; AND &apos;${Enddate_id}&apos;
	and ldx.${ProductColumnNameFilter}_id IN (&apos;${dimensionLevel_id}&apos;)
GROUP BY
	pdx.opstudy_id )
SELECT
	t.opstudy_id AS opstudy_id,
	&apos;opstudy&apos;,
	odd.opstudy_name AS opstudy_name,
	odd.opstudy_description AS opstudy_description,
	odd.opstudy_external_id AS opstudy_external_id,
	sum_st_ty,
	sum_hist_total_forecast,
	sum_hist_system_total_forecast,
	(sum_hist_total_forecast * 100 / sum_st_ty) AS user_bias,
	(sum_error_st * 100 / sum_st_ty) AS bias_st,
	(sum_user_abs_error_st * 100 / sum_st_ty) AS user_mape,
	(sum_abs_error_st * 100 / sum_st_ty) AS mape_st,
	( (sum_abs_error_st * 100 / sum_st_ty) - (sum_user_abs_error_st * 100 / sum_st_ty) ) AS planner_value_add,
	count_of_overrides,
	Count(1) over() as totalCount
FROM
	t,
	${dpDatbase}.opstudy_dim_desc odd
WHERE
	t.opstudy_id = odd.opstudy_id
GROUP BY
	t.opstudy_id,
	opstudy_name,
	opstudy_description,
	opstudy_external_id,
	sum_error_st,
	sum_abs_error_st,
	sum_user_abs_error_st,
	sum_st_ty,
	sum_hist_total_forecast,
	sum_hist_system_total_forecast,
	count_of_overrides
ORDER BY
	opstudy_id</stringProp>
                      <stringProp name="queryArguments"></stringProp>
                      <stringProp name="queryArgumentsTypes"></stringProp>
                      <stringProp name="queryTimeout"></stringProp>
                      <stringProp name="queryType">Select Statement</stringProp>
                      <stringProp name="resultSetHandler">Store as String</stringProp>
                      <stringProp name="resultSetMaxRows"></stringProp>
                      <stringProp name="resultVariable"></stringProp>
                      <stringProp name="variableNames">opstudy_id,sum_st_ty,sum_st_ly,opstudy_name,opstudy_description,opstudy_external_id,st_yoy_perc_change,totalCount</stringProp>
                      <stringProp name="TestPlan.comments">All variables passed to this query come from ${filePath}globalFilter.csv file. Changing variable in the file will change the value for ALL scripts that are using it.</stringProp>
                    </JDBCSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate data row count in the database" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1890478328">${getProductrowCount}</stringProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">validate if row count match in API response &amp; in the database</stringProp>
                        <stringProp name="Assertion.custom_message">### Response data not match... ###</stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">totalCount_#</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">${filePath}api_results\DP_antuit-results_${__time(dd-MM-yyyy HH-mm-ss,currentDate)}.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">${filePath}api_results\DP_Consolidated_report.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
